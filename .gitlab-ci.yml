# GitLab CI/CD Pipeline Configuration
# 企业级分布式存储系统 CI/CD 流水线

stages:
  - validate
  - test
  - quality
  - build
  - package
  - deploy-dev
  - deploy-test
  - deploy-prod

variables:
  # Maven配置
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  
  # Docker配置
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  REGISTRY_URL: "${CI_REGISTRY}"
  IMAGE_TAG: "${CI_COMMIT_SHORT_SHA}"
  
  # Kubernetes配置
  KUBECONFIG: /tmp/kubeconfig
  HELM_EXPERIMENTAL_OCI: 1
  
  # SonarQube配置
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"

# 缓存配置
cache:
  paths:
    - .m2/repository/
    - .sonar/cache/
    - node_modules/

# 代码验证阶段
validate:code:
  stage: validate
  image: maven:3.8.6-openjdk-8
  script:
    - echo "🔍 代码格式检查和基础验证..."
    - mvn $MAVEN_CLI_OPTS validate
    - mvn $MAVEN_CLI_OPTS compile -DskipTests
  artifacts:
    reports:
      junit: "**/target/surefire-reports/TEST-*.xml"
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# 单元测试阶段
test:unit:
  stage: test
  image: maven:3.8.6-openjdk-8
  services:
    - redis:6.2-alpine
  variables:
    REDIS_HOST: redis
    REDIS_PORT: 6379
  script:
    - echo "🧪 执行单元测试..."
    - mvn $MAVEN_CLI_OPTS test
    - mvn $MAVEN_CLI_OPTS jacoco:report
  artifacts:
    reports:
      junit: "**/target/surefire-reports/TEST-*.xml"
      coverage_report:
        coverage_format: jacoco
        path: "**/target/site/jacoco/jacoco.xml"
    paths:
      - "**/target/site/jacoco/"
    expire_in: 1 week
  coverage: '/Total.*?([0-9]{1,3})%/'
  only:
    - merge_requests
    - main
    - develop

# 集成测试阶段
test:integration:
  stage: test
  image: maven:3.8.6-openjdk-8
  services:
    - redis:6.2-alpine
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - docker info
  script:
    - echo "🔧 执行集成测试..."
    - mvn $MAVEN_CLI_OPTS verify -Dskip.unit.tests=true
  artifacts:
    reports:
      junit: "**/target/failsafe-reports/TEST-*.xml"
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# SonarQube代码质量检查
quality:sonarqube:
  stage: quality
  image: maven:3.8.6-openjdk-8
  script:
    - echo "📊 SonarQube代码质量分析..."
    - mvn $MAVEN_CLI_OPTS sonar:sonar
      -Dsonar.projectKey=$CI_PROJECT_NAME
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.qualitygate.wait=true
  allow_failure: false
  only:
    - merge_requests
    - main
    - develop

# 构建应用程序
build:maven:
  stage: build
  image: maven:3.8.6-openjdk-8
  script:
    - echo "🏗️ Maven构建应用程序..."
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests
  artifacts:
    paths:
      - "*/target/*.jar"
      - "spring-boot-api/target/*.jar"
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# 构建Docker镜像
build:docker:
  stage: package
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  dependencies:
    - build:maven
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "🐳 构建Docker镜像..."
    # 构建API服务镜像
    - docker build -t $CI_REGISTRY_IMAGE/api:$IMAGE_TAG -f spring-boot-api/Dockerfile spring-boot-api/
    - docker build -t $CI_REGISTRY_IMAGE/api:latest -f spring-boot-api/Dockerfile spring-boot-api/
    
    # 构建Raft核心服务镜像
    - docker build -t $CI_REGISTRY_IMAGE/raft-core:$IMAGE_TAG -f distribute-java-core/Dockerfile distribute-java-core/
    - docker build -t $CI_REGISTRY_IMAGE/raft-core:latest -f distribute-java-core/Dockerfile distribute-java-core/
    
    # 推送镜像
    - docker push $CI_REGISTRY_IMAGE/api:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE/api:latest
    - docker push $CI_REGISTRY_IMAGE/raft-core:$IMAGE_TAG
    - docker push $CI_REGISTRY_IMAGE/raft-core:latest
  only:
    - main
    - develop

# 安全扫描
security:trivy:
  stage: package
  image: aquasec/trivy:latest
  dependencies:
    - build:docker
  script:
    - echo "🔒 Docker镜像安全扫描..."
    - trivy image --exit-code 0 --severity HIGH,CRITICAL --format json -o trivy-report.json $CI_REGISTRY_IMAGE/api:$IMAGE_TAG
    - trivy image --exit-code 1 --severity CRITICAL $CI_REGISTRY_IMAGE/api:$IMAGE_TAG
  artifacts:
    reports:
      container_scanning: trivy-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - main
    - develop

# 部署到开发环境
deploy:dev:
  stage: deploy-dev
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://dev.raft-storage.local
  dependencies:
    - build:docker
  before_script:
    - echo $KUBE_CONFIG_DEV | base64 -d > $KUBECONFIG
    - kubectl config use-context dev-cluster
  script:
    - echo "🚀 部署到开发环境..."
    - kubectl set image deployment/raft-api raft-api=$CI_REGISTRY_IMAGE/api:$IMAGE_TAG -n raft-storage-dev
    - kubectl set image statefulset/raft-core raft-core=$CI_REGISTRY_IMAGE/raft-core:$IMAGE_TAG -n raft-storage-dev
    - kubectl rollout status deployment/raft-api -n raft-storage-dev --timeout=300s
    - kubectl rollout status statefulset/raft-core -n raft-storage-dev --timeout=300s
  only:
    - develop
  when: manual

# 部署到测试环境
deploy:test:
  stage: deploy-test
  image: bitnami/kubectl:latest
  environment:
    name: testing
    url: https://test.raft-storage.local
  dependencies:
    - build:docker
  before_script:
    - echo $KUBE_CONFIG_TEST | base64 -d > $KUBECONFIG
    - kubectl config use-context test-cluster
  script:
    - echo "🧪 部署到测试环境..."
    - kubectl set image deployment/raft-api raft-api=$CI_REGISTRY_IMAGE/api:$IMAGE_TAG -n raft-storage-test
    - kubectl set image statefulset/raft-core raft-core=$CI_REGISTRY_IMAGE/raft-core:$IMAGE_TAG -n raft-storage-test
    - kubectl rollout status deployment/raft-api -n raft-storage-test --timeout=300s
    - kubectl rollout status statefulset/raft-core -n raft-storage-test --timeout=300s
  only:
    - main
  when: manual

# 部署到生产环境
deploy:prod:
  stage: deploy-prod
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://raft-storage.local
  dependencies:
    - build:docker
  before_script:
    - echo $KUBE_CONFIG_PROD | base64 -d > $KUBECONFIG
    - kubectl config use-context prod-cluster
  script:
    - echo "🏭 部署到生产环境..."
    - kubectl set image deployment/raft-api raft-api=$CI_REGISTRY_IMAGE/api:$IMAGE_TAG -n raft-storage-prod
    - kubectl set image statefulset/raft-core raft-core=$CI_REGISTRY_IMAGE/raft-core:$IMAGE_TAG -n raft-storage-prod
    - kubectl rollout status deployment/raft-api -n raft-storage-prod --timeout=300s
    - kubectl rollout status statefulset/raft-core -n raft-storage-prod --timeout=300s
  only:
    - main
  when: manual
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'

# 性能测试
test:performance:
  stage: deploy-test
  image: grafana/k6:latest
  environment:
    name: testing
    url: https://test.raft-storage.local
  script:
    - echo "⚡ 执行性能测试..."
    - k6 run --out json=performance-results.json scripts/performance-test.js
  artifacts:
    reports:
      performance: performance-results.json
    expire_in: 1 week
  only:
    - main
  when: manual

# 清理旧版本
cleanup:old-images:
  stage: deploy-prod
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "🧹 清理旧版本镜像..."
    # 保留最近10个版本
    - |
      for image in api raft-core; do
        tags=$(docker images --format "table {{.Tag}}" $CI_REGISTRY_IMAGE/$image | grep -v TAG | grep -v latest | sort -V | head -n -10)
        for tag in $tags; do
          echo "删除旧镜像: $CI_REGISTRY_IMAGE/$image:$tag"
          docker rmi $CI_REGISTRY_IMAGE/$image:$tag || true
        done
      done
  only:
    - schedules
  when: manual 