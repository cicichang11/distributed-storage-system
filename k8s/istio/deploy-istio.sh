#!/bin/bash

# IstioÊúçÂä°ÁΩëÊ†ºÈÉ®ÁΩ≤ËÑöÊú¨
set -e

ISTIO_VERSION="${1:-1.20.1}"
NAMESPACE="raft-storage"
ISTIO_NAMESPACE="istio-system"

echo "=== Raft Storage Istio Service Mesh Deployment Script ==="
echo "Istio Version: $ISTIO_VERSION"
echo "Application Namespace: $NAMESPACE"
echo "Istio Namespace: $ISTIO_NAMESPACE"

# Ê£ÄÊü•kubectlÊòØÂê¶ÂÆâË£Ö
if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl is not installed. Please install kubectl first."
    exit 1
fi

# Ê£ÄÊü•KubernetesÈõÜÁæ§ËøûÊé•
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Cannot connect to Kubernetes cluster. Please check your kubeconfig."
    exit 1
fi

echo "‚úÖ Prerequisites check passed"

# Ê£ÄÊü•IstioÊòØÂê¶Â∑≤ÂÆâË£Ö
if kubectl get namespace $ISTIO_NAMESPACE &> /dev/null; then
    echo "üìä Istio namespace already exists"
    
    # Ê£ÄÊü•IstioÁâàÊú¨
    if kubectl get deployment istiod -n $ISTIO_NAMESPACE &> /dev/null; then
        CURRENT_VERSION=$(kubectl get deployment istiod -n $ISTIO_NAMESPACE -o jsonpath='{.metadata.labels.version}' || echo "unknown")
        echo "üìä Current Istio version: $CURRENT_VERSION"
        
        if [ "$CURRENT_VERSION" != "$ISTIO_VERSION" ]; then
            echo "‚ö†Ô∏è  Version mismatch detected"
            read -p "üîÑ Do you want to upgrade Istio to $ISTIO_VERSION? (y/N): " -n 1 -r
            echo
            
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "‚ÑπÔ∏è  Using existing Istio installation"
            else
                echo "üöÄ Upgrading Istio..."
                # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†IstioÂçáÁ∫ßÈÄªËæë
            fi
        else
            echo "‚úÖ Istio version matches requirements"
        fi
    else
        echo "‚ö†Ô∏è  Istio namespace exists but istiod not found"
    fi
else
    echo "üì• Installing Istio $ISTIO_VERSION..."
    
    # ‰∏ãËΩΩIstio
    if [ ! -d "istio-$ISTIO_VERSION" ]; then
        echo "üì• Downloading Istio $ISTIO_VERSION..."
        curl -L https://istio.io/downloadIstio | ISTIO_VERSION=$ISTIO_VERSION sh -
    fi
    
    # Ê∑ªÂä†istioctlÂà∞PATH
    export PATH=$PWD/istio-$ISTIO_VERSION/bin:$PATH
    
    # Ê£ÄÊü•istioctl
    if ! command -v istioctl &> /dev/null; then
        echo "‚ùå istioctl not found in PATH"
        exit 1
    fi
    
    # È¢ÑÊ£ÄÊü•
    echo "üîç Running Istio pre-check..."
    istioctl x precheck
    
    # ÂÆâË£ÖIstio
    echo "üöÄ Installing Istio with demo profile..."
    istioctl install --set values.defaultRevision=default -y
    
    echo "‚úÖ Istio installed successfully"
fi

# Ê£ÄÊü•Â∫îÁî®ÂëΩÂêçÁ©∫Èó¥ÊòØÂê¶Â≠òÂú®
if ! kubectl get namespace $NAMESPACE &> /dev/null; then
    echo "‚ùå Application namespace $NAMESPACE does not exist. Please deploy the application first."
    exit 1
fi

# ÂêØÁî®Istio sidecarÊ≥®ÂÖ•
echo "üíâ Enabling Istio sidecar injection for namespace $NAMESPACE..."
kubectl label namespace $NAMESPACE istio-injection=enabled --overwrite

# Á≠âÂæÖIstioÁªÑ‰ª∂Â∞±Áª™
echo "‚è≥ Waiting for Istio components to be ready..."
kubectl wait --for=condition=available deployment/istiod -n $ISTIO_NAMESPACE --timeout=300s
kubectl wait --for=condition=available deployment/istio-ingressgateway -n $ISTIO_NAMESPACE --timeout=300s

# ÈÉ®ÁΩ≤IstioÈÖçÁΩÆ
echo "üîß Deploying Istio configurations..."

# ÂàõÂª∫TLSËØÅ‰π¶ÔºàËá™Á≠æÂêçÁî®‰∫éÊµãËØïÔºâ
echo "üîê Creating TLS certificate..."
if ! kubectl get secret raft-storage-tls-secret -n $ISTIO_NAMESPACE &> /dev/null; then
    # ÁîüÊàêËá™Á≠æÂêçËØÅ‰π¶
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout /tmp/tls.key -out /tmp/tls.crt \
        -subj "/CN=raft-api.local/O=raft-storage" \
        -addext "subjectAltName=DNS:raft-api.local,DNS:raft-admin.local,DNS:raft-monitoring.local"
    
    # ÂàõÂª∫Secret
    kubectl create secret tls raft-storage-tls-secret \
        --key=/tmp/tls.key --cert=/tmp/tls.crt -n $ISTIO_NAMESPACE
    
    # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    rm -f /tmp/tls.key /tmp/tls.crt
    
    echo "‚úÖ TLS certificate created"
else
    echo "‚ÑπÔ∏è  TLS certificate already exists"
fi

# ÈÉ®ÁΩ≤GatewayÂíåVirtualService
echo "üåê Deploying Gateway and VirtualService..."
kubectl apply -f gateway.yaml

# ÈÉ®ÁΩ≤DestinationRules
echo "üéØ Deploying DestinationRules..."
kubectl apply -f destination-rules.yaml

# ÈÉ®ÁΩ≤ÂÆâÂÖ®Á≠ñÁï•
echo "üîí Deploying security policies..."
kubectl apply -f security-policies.yaml

# ÈÉ®ÁΩ≤ÈÅ•ÊµãÈÖçÁΩÆ
echo "üìä Deploying telemetry configurations..."
kubectl apply -f telemetry.yaml

# Á≠âÂæÖÈÖçÁΩÆÁîüÊïà
echo "‚è≥ Waiting for configurations to take effect..."
sleep 10

# È™åËØÅÈÉ®ÁΩ≤
echo ""
echo "üîç Verifying Istio deployment..."
echo "================================"

# Ê£ÄÊü•IstioÁªÑ‰ª∂Áä∂ÊÄÅ
echo ""
echo "üìã Istio Components Status:"
kubectl get pods -n $ISTIO_NAMESPACE

# Ê£ÄÊü•Â∫îÁî®PodÁöÑsidecarÊ≥®ÂÖ•
echo ""
echo "üìã Application Pods (with sidecar):"
kubectl get pods -n $NAMESPACE -o wide

# Ê£ÄÊü•GatewayÁä∂ÊÄÅ
echo ""
echo "üåê Gateway Status:"
kubectl get gateway -n $NAMESPACE

# Ê£ÄÊü•VirtualServiceÁä∂ÊÄÅ
echo ""
echo "üéØ VirtualService Status:"
kubectl get virtualservice -n $NAMESPACE

# Ê£ÄÊü•DestinationRuleÁä∂ÊÄÅ
echo ""
echo "üìä DestinationRule Status:"
kubectl get destinationrule -n $NAMESPACE

# Ëé∑ÂèñIngress GatewayÂ§ñÈÉ®IP
echo ""
echo "üåç Getting Ingress Gateway external access..."
INGRESS_HOST=$(kubectl get service istio-ingressgateway -n $ISTIO_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
INGRESS_PORT=$(kubectl get service istio-ingressgateway -n $ISTIO_NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="http2")].port}')
SECURE_INGRESS_PORT=$(kubectl get service istio-ingressgateway -n $ISTIO_NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="https")].port}')

if [ -z "$INGRESS_HOST" ]; then
    INGRESS_HOST=$(kubectl get service istio-ingressgateway -n $ISTIO_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
fi

if [ -z "$INGRESS_HOST" ]; then
    echo "‚ö†Ô∏è  External LoadBalancer not available. Using NodePort access..."
    INGRESS_HOST=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}')
    if [ -z "$INGRESS_HOST" ]; then
        INGRESS_HOST=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
    fi
    INGRESS_PORT=$(kubectl get service istio-ingressgateway -n $ISTIO_NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
    SECURE_INGRESS_PORT=$(kubectl get service istio-ingressgateway -n $ISTIO_NAMESPACE -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
fi

# ÂÅ•Â∫∑Ê£ÄÊü•
echo ""
echo "üè• Health Check:"
echo "==============="

if [ -n "$INGRESS_HOST" ]; then
    echo "üîç Testing API health through Istio Gateway..."
    
    # Ê∑ªÂä†hostsÊù°ÁõÆÊèêÁ§∫
    echo ""
    echo "üìù Add the following entries to your /etc/hosts file:"
    echo "$INGRESS_HOST raft-api.local"
    echo "$INGRESS_HOST raft-admin.local"
    echo "$INGRESS_HOST raft-monitoring.local"
    echo ""
    
    # ÊµãËØïÂÅ•Â∫∑Ê£ÄÊü•
    echo "üß™ Testing health check (you may need to add hosts entries first):"
    echo "curl -k https://raft-api.local:$SECURE_INGRESS_PORT/api/v1/monitoring/health"
    echo ""
    
    # Â∞ùËØïÁõ¥Êé•ÊµãËØïÔºàÂ¶ÇÊûúÂèØËÉΩÔºâ
    if command -v curl &> /dev/null; then
        echo "üî¨ Attempting direct health check..."
        if curl -k -H "Host: raft-api.local" "https://$INGRESS_HOST:$SECURE_INGRESS_PORT/api/v1/monitoring/health" --connect-timeout 10 --max-time 30; then
            echo "‚úÖ Health check passed"
        else
            echo "‚ö†Ô∏è  Health check failed (this might be normal if hosts are not configured)"
        fi
    fi
else
    echo "‚ö†Ô∏è  Could not determine ingress host"
fi

# ÊòæÁ§∫ËÆøÈóÆ‰ø°ÊÅØ
echo ""
echo "üéâ Istio Service Mesh deployment completed!"
echo ""
echo "üìù Access Information:"
echo "====================="
echo ""
echo "üåê External Access URLs:"
echo "  API Service: https://raft-api.local:$SECURE_INGRESS_PORT"
echo "  Admin Interface: https://raft-admin.local:$SECURE_INGRESS_PORT"
echo "  Monitoring: https://raft-monitoring.local:$SECURE_INGRESS_PORT"
echo ""
echo "üîß Port Forward Access:"
echo "  kubectl port-forward service/istio-ingressgateway -n $ISTIO_NAMESPACE 8080:80 8443:443"
echo ""
echo "üìä Istio Dashboard:"
echo "  kubectl port-forward service/kiali -n $ISTIO_NAMESPACE 20001:20001"
echo "  kubectl port-forward service/jaeger -n $ISTIO_NAMESPACE 16686:16686"
echo "  kubectl port-forward service/grafana -n $ISTIO_NAMESPACE 3000:3000"
echo ""
echo "üîç Useful Commands:"
echo "=================="
echo ""
echo "Check Istio proxy status:"
echo "  istioctl proxy-status"
echo ""
echo "Check Istio configuration:"
echo "  istioctl analyze -n $NAMESPACE"
echo ""
echo "View Envoy configuration:"
echo "  istioctl proxy-config cluster <pod-name> -n $NAMESPACE"
echo ""
echo "Check mTLS status:"
echo "  istioctl authn tls-check <pod-name>.<namespace>.svc.cluster.local"
echo ""
echo "Monitor traffic:"
echo "  istioctl dashboard kiali" 