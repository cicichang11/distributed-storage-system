#!/bin/bash

# Ëá™Âä®Êâ©Áº©ÂÆπÈÉ®ÁΩ≤ËÑöÊú¨
set -e

NAMESPACE="raft-storage"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

echo "=== Raft Storage Auto-scaling Deployment Script ==="

# Ê£ÄÊü•kubectlÊòØÂê¶ÂÆâË£Ö
if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl is not installed. Please install kubectl first."
    exit 1
fi

# Ê£ÄÊü•KubernetesÈõÜÁæ§ËøûÊé•
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Cannot connect to Kubernetes cluster. Please check your kubeconfig."
    exit 1
fi

echo "‚úÖ Prerequisites check passed"

# Ê£ÄÊü•ÂëΩÂêçÁ©∫Èó¥ÊòØÂê¶Â≠òÂú®
if ! kubectl get namespace $NAMESPACE &> /dev/null; then
    echo "‚ùå Namespace $NAMESPACE does not exist. Please deploy the main application first."
    exit 1
fi

echo "‚úÖ Namespace $NAMESPACE exists"

# Ê£ÄÊü•Metrics ServerÊòØÂê¶ÈÉ®ÁΩ≤
echo "üîç Checking Metrics Server..."
if ! kubectl get deployment metrics-server -n kube-system &> /dev/null; then
    echo "‚ö†Ô∏è  Metrics Server not found. Deploying Metrics Server..."
    
    # ÈÉ®ÁΩ≤Metrics Server
    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    
    # Á≠âÂæÖMetrics ServerÂ∞±Áª™
    echo "‚è≥ Waiting for Metrics Server to be ready..."
    kubectl wait --for=condition=ready pod -l k8s-app=metrics-server -n kube-system --timeout=300s
    
    echo "‚úÖ Metrics Server deployed successfully"
else
    echo "‚úÖ Metrics Server already exists"
fi

# Ê£ÄÊü•Prometheus OperatorÊòØÂê¶ÈÉ®ÁΩ≤ÔºàÁî®‰∫éËá™ÂÆö‰πâÊåáÊ†áÔºâ
echo "üîç Checking Prometheus Operator..."
if ! kubectl get crd prometheusrules.monitoring.coreos.com &> /dev/null; then
    echo "‚ö†Ô∏è  Prometheus Operator not found. Installing Prometheus Operator..."
    
    # ÂÆâË£ÖPrometheus Operator
    kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
    
    # ‰ΩøÁî®kube-prometheus-stack Helm chart
    if command -v helm &> /dev/null; then
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        
        helm upgrade --install prometheus-operator prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
            --set prometheus.prometheusSpec.ruleSelectorNilUsesHelmValues=false \
            --wait
        
        echo "‚úÖ Prometheus Operator installed via Helm"
    else
        echo "‚ö†Ô∏è  Helm not found. Please install Prometheus Operator manually or install Helm."
        echo "   You can continue without custom metrics, but only CPU/Memory scaling will work."
    fi
else
    echo "‚úÖ Prometheus Operator already exists"
fi

# Ê£ÄÊü•VPAÊòØÂê¶ÈÉ®ÁΩ≤ÔºàÂèØÈÄâÔºâ
echo "üîç Checking Vertical Pod Autoscaler..."
if ! kubectl get crd verticalpodautoscalers.autoscaling.k8s.io &> /dev/null; then
    echo "‚ö†Ô∏è  VPA not found. You can install it manually if needed:"
    echo "   git clone https://github.com/kubernetes/autoscaler.git"
    echo "   cd autoscaler/vertical-pod-autoscaler/"
    echo "   ./hack/vpa-install.sh"
    echo "   For now, continuing without VPA..."
else
    echo "‚úÖ VPA already exists"
fi

# ÈÉ®ÁΩ≤Ëá™ÂÆö‰πâÊåáÊ†áÈÖçÁΩÆ
echo "üöÄ Deploying custom metrics configuration..."
kubectl apply -f $SCRIPT_DIR/hpa/custom-metrics-config.yaml

# ÈÉ®ÁΩ≤Êâ©Áº©ÂÆπÁ≠ñÁï•ÈÖçÁΩÆ
echo "üöÄ Deploying scaling policies..."
kubectl apply -f $SCRIPT_DIR/hpa/scaling-policies.yaml

# ÈÉ®ÁΩ≤HPAÈÖçÁΩÆ
echo "üöÄ Deploying HPA configurations..."
kubectl apply -f $SCRIPT_DIR/hpa/api-hpa.yaml

# ÈÉ®ÁΩ≤VPAÈÖçÁΩÆÔºàÂ¶ÇÊûúVPAÂèØÁî®Ôºâ
if kubectl get crd verticalpodautoscalers.autoscaling.k8s.io &> /dev/null; then
    echo "üöÄ Deploying VPA configurations..."
    kubectl apply -f $SCRIPT_DIR/hpa/vpa.yaml
fi

# Á≠âÂæÖHPAÂ∞±Áª™
echo "‚è≥ Waiting for HPA to be ready..."
sleep 10

# Ê£ÄÊü•HPAÁä∂ÊÄÅ
echo "üìä Checking HPA status..."
kubectl get hpa -n $NAMESPACE

# Ê£ÄÊü•Ëá™ÂÆö‰πâÊåáÊ†áÊòØÂê¶ÂèØÁî®
echo "üîç Checking custom metrics availability..."
if kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1" &> /dev/null; then
    echo "‚úÖ Custom metrics API available"
    
    # ÂàóÂá∫ÂèØÁî®ÁöÑËá™ÂÆö‰πâÊåáÊ†á
    echo "üìä Available custom metrics:"
    kubectl get --raw "/apis/custom.metrics.k8s.io/v1beta1" | jq '.resources[].name' 2>/dev/null || echo "   (jq not available for detailed listing)"
else
    echo "‚ö†Ô∏è  Custom metrics API not available. Only CPU/Memory scaling will work."
fi

# ÊòæÁ§∫ÈÉ®ÁΩ≤Áä∂ÊÄÅ
echo ""
echo "üìä Auto-scaling Deployment Status:"
echo "=================================="

echo ""
echo "üîÑ HPA Status:"
kubectl get hpa -n $NAMESPACE -o wide

if kubectl get crd verticalpodautoscalers.autoscaling.k8s.io &> /dev/null; then
    echo ""
    echo "üìà VPA Status:"
    kubectl get vpa -n $NAMESPACE -o wide
fi

echo ""
echo "üìã ConfigMaps:"
kubectl get configmap -n $NAMESPACE | grep -E "(scaling|metrics)"

echo ""
echo "‚è∞ CronJobs:"
kubectl get cronjob -n $NAMESPACE

echo ""
echo "üéØ Monitoring Resources:"
kubectl get servicemonitor,prometheusrule -n $NAMESPACE 2>/dev/null || echo "   ServiceMonitor/PrometheusRule not available (normal if Prometheus Operator not installed)"

# Êèê‰æõ‰ΩøÁî®ËØ¥Êòé
echo ""
echo "üéâ Auto-scaling deployment completed!"
echo ""
echo "üìù Usage Instructions:"
echo "====================="
echo ""
echo "1. Monitor HPA status:"
echo "   kubectl get hpa -n $NAMESPACE -w"
echo ""
echo "2. Check scaling events:"
echo "   kubectl describe hpa raft-api-hpa -n $NAMESPACE"
echo ""
echo "3. Monitor pod scaling:"
echo "   kubectl get pods -n $NAMESPACE -w"
echo ""
echo "4. View scaling policies:"
echo "   kubectl get configmap scaling-policies -n $NAMESPACE -o yaml"
echo ""
echo "5. Test scaling manually:"
echo "   # Generate load to trigger scaling"
echo "   kubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh"
echo "   # Inside the container:"
echo "   # while true; do wget -q -O- http://raft-api-service.raft-storage.svc.cluster.local/api/v1/monitoring/health; done"
echo ""
echo "6. Check custom metrics (if available):"
echo "   kubectl get --raw '/apis/custom.metrics.k8s.io/v1beta1/namespaces/$NAMESPACE/pods/*/http_requests_per_second'"
echo ""
echo "7. View VPA recommendations (if VPA is installed):"
echo "   kubectl describe vpa -n $NAMESPACE"
echo ""
echo "üìö For more information, check the documentation in k8s/hpa/" 